# -*- coding: utf-8 -*-
"""car_price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19dA7eV0csbmzFk1KS7ZqPVYjX85bEEA6
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels as sm

data = pd.read_csv('car data.csv')

data.shape

"""The dataframe has 301 rows and 9 variables."""

data.head()

print(data['Fuel_Type'].unique())
print(data['Seller_Type'].unique())
print(data['Transmission'].unique())
print(data['Owner'].unique())

data.isnull().sum()

"""There are no missing values. Nothing to worry about..."""

data.describe()

"""The data contains records from the year 2003 to 2018.

"""

final_dataset=data[['Year','Selling_Price','Present_Price','Kms_Driven','Fuel_Type','Seller_Type','Transmission','Owner']]

final_dataset.head()

final_dataset['Current Year']=2020

final_dataset.head()

final_dataset['no_year']=final_dataset['Current Year']- final_dataset['Year']

"""calculating the number of years w.r.t this year. And adding it to the dataset."""

final_dataset.head()

final_dataset.drop(['Year'],axis=1,inplace=True)

final_dataset.head()

final_dataset=pd.get_dummies(final_dataset,drop_first=True)

final_dataset.head()

final_dataset=final_dataset.drop(['Current Year'],axis=1)

final_dataset.head()

final_dataset.corr()

plt.figure(figsize=(10,10))
sns.heatmap(final_dataset.corr(), annot= True)

sns.pairplot(final_dataset)

X=final_dataset.iloc[:,1:]
y=final_dataset.iloc[:,0]

X['Owner'].unique()

X.head()

y.head()

from sklearn.ensemble import ExtraTreesRegressor
model = ExtraTreesRegressor()
model.fit(X,y)

print(model.feature_importances_)

feature_importances = pd.Series(model.feature_importances_, index = X.columns)
feature_importances.nlargest(6).plot(kind = 'barh')
plt.show()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor()

n_estimators = [int(x) for x in np.linspace(start= 100, stop= 1200, num= 12)]
print(n_estimators)

from sklearn.model_selection import RandomizedSearchCV

#number of trees in random forest
n_estimators = [int(x) for x in np.linspace(start= 100, stop= 1200, num= 12)]

#Number of features to consider at every split
max_features =['auto','sqrt']

# Maximum number of levels in tree
max_depth = [int(x) for x in np.linspace(5, 30, num = 6)]

# max_depth.append(None)

# Minimum number of samples required to split a node
min_samples_split = [2, 5, 10, 15, 100]

# Minimum number of samples required at each leaf node
min_samples_leaf = [1, 2, 5, 10]

# Create the random grid
random_grid = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth,
               'min_samples_split': min_samples_split,
               'min_samples_leaf': min_samples_leaf}

print(random_grid)

# Random search of parameters, using 3 fold cross validation, 
# search across 100 different combinations
regressor_random = RandomizedSearchCV(estimator = regressor, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)

regressor_random.fit(X_train,y_train)

regressor_random.best_params_

regressor_random.best_score_

predictions= regressor_random.predict(X_test)

sns.distplot(y_test-predictions)

plt.scatter(y_test,predictions)

from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))

import pickle
# open a file, where you ant to store the data
file = open('random_forest_regression_model.pkl', 'wb')

# dump information to that file
pickle.dump(regressor_random, file)

